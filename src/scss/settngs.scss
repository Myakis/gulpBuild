// Переменные цветов======================================================================================
//Основыные
$mainColor: #000000;
$primary: #edc5a2;
$secondery: #f5fafe;
//Дополнительные
$dark: #0a223d;
$light: #fff;
$button: #4d50ee;
$footer-color: #bdbdbd;
$body: #15171e;

//Подключение шрифтов через google fonts ======================================================================================

//Используй плагин Google Fonsts

//Шрифт
$mainFont: "Lucida Sans";
$fontSize: 16;

//Минимальная ширина страницы
$minWidth: 320;

//Максильманая ширина страницы по макету
$maxWidthPage: 1920;

//Максмальныей размер контейнера по макету
$maxWidthConteiner: 1440;

//Отступ у контейнера
$containerPadding: 30;

//Ширина контейнера с отступами
$widthConteiner: $maxWidthConteiner + $containerPadding + px;

///ОСНОВЫНЕ НАСТРОКИ СЕЛЕКТОРВ======================================================================================

* {
  box-sizing: border-box;
}

.conteiner {
  max-width: $widthConteiner;
  margin: 0 auto;
  //Если паддинг не нужен - закомментировать
  padding: 0 calc($containerPadding / 2 * 1px) 0 calc($containerPadding / 2 * 1px);
}

body {
  margin: 0;
  padding: 0;
  font-family: $mainFont, sans-serif;
  background-color: $body;
}

img {
  max-width: 100%;
}

a {
  text-decoration: none;
}
ul,
ol {
  list-style: none;
}

h1,
h2,
h3,
h4,
h5,
h6,
p {
  margin: 0;
}

//МИКСИНЫ И ФУНКЦИИ==========================================================================================

//Адаптивные размеры

//Высчитывать проценты
@function percent($min, $max) {
  @return calc((#{$min} / #{$max}) * 100%);
}

//Конвертация px в rem

@function rem($px) {
  @return calc(#{$px} / #{$fontSize} * 1rem);
}

//Конвертация из px в em
// ПРИМЕР em(20,18)
// em(*РАЗМЕР ШРИФТА элемента или родителя, для которого применятеся *, *PX по макету*)
//.block{font-size:20px;padding:em(20,15},em(20,25);

@function em($fz, $value) {
  @return calc($value / $fz * 1em);
}

//==========================================================================================================
@function strip-unit($value) {
  @return calc($value / ($value * 0 + 1));
}
//Адаптивное свойства
//!ВСЕ ЗНАЧЕНИЯ ВВОДЯТСЯ В PX, миксин конвертирует в rem

// $value: Css свойство,которое в последствие будет резиново меняться
// $maxValue:Максимальное значение
//$minValue: минимальное значение
// $maxWidth: Максимальная ширина, с которой свойство начнет меняться
//( по умолчанию стоит ширина контейнера,т.е, как только ширина окна браузера дойдет до ширины контейнера начнутся изменения)
// *Указывать только в том случае, если нужно изменить свойство только в указаном диапазоне
//$minWidth: по умолчанию будет уменьшаться до 320 px
// *Указывать только в том случае, если нужно изменить свойство только в указаном диапазоне
//$bollean: Указать 1,если нужно изменение css свойства от 0px до бесконечности, по мере увеличения окна браузера

//!ПРИМЕРЫ ИСПОЛЬЗОВАНИЯ
// @include valueAdaptive("font-size", 90,40); font-size будет уменьшаться с 90px до 40px соотвественно
//(с размера экрана 1440px(ограничивающий контейнер*меняется идивидуально для каждого проекта*) до 320px минимально поддерживаемый размер телефонов)

// @include valueAdaptive("font-size", 90,40,992,567); начнет изменения с ширины 992px до 567

// @include valueAdaptive("font-size", 90,40,992,567,1); в диапазоне от 992 до 567px будет меняться резиново
// при разрашении больше 992px, размер будет увеличиваться, меньше 567 - уменьшаться (ИСПОЛЬЗУЕТСЯ КРАЙНЕ РЕДКО)

@mixin valueAdaptive($value, $maxValue, $minValue, $maxWidth: $maxWidthConteiner, $minWidth: 320, $bollean: false) {
  $addSize: $maxValue - $minValue;

  @if ($bollean==1) {
    $addWidth: $maxWidthPage - 320;
    #{$value}: calc(#{rem($minValue)} + #{$addSize} * ((100vw - 320px) / #{$addWidth}));
  } @else {
    $addWidth: $maxWidth - $minWidth;
    #{$value}: #{rem(#{$minValue})};
    @media (min-width: (#{$minWidth}px) ) {
      #{$value}: calc(
        #{rem(#{$minValue})} + #{strip-unit($addSize)} * ((100vw - #{$minWidth}px) / #{strip-unit($addWidth)})
      );
    }
    @media (min-width: (#{$maxWidth}px) ) {
      #{$value}: #{rem(#{$maxValue})};
    }
  }
}
